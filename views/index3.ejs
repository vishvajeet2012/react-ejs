<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hacker Terminal</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: monospace;
            background-color: #000;
            color: #0f0;
            overflow: hidden;
        }

        .terminal {
            width: 80vw;
            height: 80vh;
            margin: auto;
            padding: 20px;
            border: 2px solid #0f0;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
            background-color: #000;
            display: flex;
            flex-direction: column;
        }

        .output {
            flex: 1;
            overflow-y: auto;
            white-space: pre-wrap;
        }

        .input-line {
            display: flex;
        }

        .prompt {
            color: #0f0;
        }

        input {
            border: none;
            background: transparent;
            color: #0f0;
            outline: none;
            flex: 1;
            font-size: 1em;
            line-height: 1.5em;
        }
    </style>
</head>
<body>
    <div class="terminal">
        <div class="output" id="output"></div>
        <div class="input-line">
            <span class="prompt">$ </span>
            <input type="text" id="command" autofocus>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const commandInput = document.getElementById('command');
            const outputDiv = document.getElementById('output');
            
            commandInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    const command = commandInput.value;
                    processCommand(command);
                    commandInput.value = ''; // Clear input after processing
                }
            });

            function processCommand(command) {
                const response = executeCommand(command);
                const timestamp = new Date().toLocaleTimeString();
                outputDiv.innerHTML += `<div>[${timestamp}] $ ${command}<br>${response}</div>`;
                outputDiv.scrollTop = outputDiv.scrollHeight; // Scroll to bottom
            }

            function executeCommand(command) {
                // Basic command processing
                switch (command.trim().toLowerCase()) {
                    case 'help':
                        return 'Available commands: help, clear, date';
                    case 'clear':
                        outputDiv.innerHTML = ''; // Clear output
                        return '';
                    case 'date':
                        return new Date().toLocaleString();
                    default:
                        return `Command not found: ${command}`;
                }
            }
        });
    </script>
</body>
</html>
